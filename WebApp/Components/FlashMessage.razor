@if (Type == MessageType.Error)
{
    <div class="my-5 break-all rounded-md border border-solid border-rose-400 bg-rose-200 p-4 text-rose-800">
        <i class="fa-solid fa-triangle-exclamation"></i >
        @(new MarkupString(Message))
    </div>
}

@if (Type == MessageType.Success)
{
    <div class="my-5 break-all rounded-md border border-solid border-lime-400 bg-lime-200 p-4 text-lime-800">
        <i class="fa-check-square fa-solid"></i>
        @(new MarkupString(Message))
    </div>
}

@if (Type == MessageType.SuccessClickable)
{
<div class="my-5 break-all rounded-md border border-solid border-lime-400 bg-lime-200 p-4 text-lime-800">
    <i class="fa-check-square fa-solid"></i>
    <button class="hover:font-bold"
            @onclick="OnMessageTextClickCallback">
        @(new MarkupString(Message))
    </button>
</div>
}

@if (Type == MessageType.Info)
{
    <div class="my-5 break-all rounded-md border border-solid border-cyan-400 bg-cyan-200 p-4 text-cyan-800">
        <i class="fa-info-circle fa-solid"></i>
        @(new MarkupString(Message))
    </div>
}

@if (Type == MessageType.InfoClickable)
{
    <div class="my-5 break-all rounded-md border border-solid border-cyan-400 bg-cyan-200 p-4 text-cyan-800">
        <i class="fa-info-square fa-solid"></i>
        <button class="hover:font-bold"
                @onclick="OnMessageTextClickCallback">
            @(new MarkupString(Message))
        </button>
    </div>
}

@code {
    [Parameter] public required string Message { get; set; }
    [Parameter] public required MessageType Type { get; set; }
    [Parameter] public EventCallback<MouseEventArgs> OnMessageTextClickCallback { get; set; }

    public enum MessageType
    {
        Info,
        InfoClickable,
        Error,
        Success,
        SuccessClickable
    }
}