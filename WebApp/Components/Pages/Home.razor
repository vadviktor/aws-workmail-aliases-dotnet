@page "/"
@rendermode InteractiveServer

<PageTitle>AWS Workmail aliases</PageTitle>

<div class="container mx-auto my-3 px-4">
    <div class="mb-10 mt-4">
        <Header AliasCount="@_aliases?.Count"
                class="text-3xl font-medium">
        </Header>
    </div>

    @if (!string.IsNullOrWhiteSpace(_flashMessage.Error))
    {
        <FlashMessage Message="@_flashMessage.Error"
                      Type="FlashMessage.MessageType.Error">
        </FlashMessage>
    }

    @if (!string.IsNullOrWhiteSpace(_flashMessage.Success))
    {
        <FlashMessage Message="@_flashMessage.Success"
                      Type="FlashMessage.MessageType.Success">
        </FlashMessage>
    }

    @if (!string.IsNullOrWhiteSpace(_flashMessage.Info))
    {
        <FlashMessage Message="@_flashMessage.Info"
                      Type="FlashMessage.MessageType.Info">
        </FlashMessage>
    }

    @if (!string.IsNullOrWhiteSpace(_flashMessage.SuccessClickable))
    {
        <FlashMessage Message="@_flashMessage.SuccessClickable"
                      OnCopyAliasToClipboardCallback="@(() => CopyAliasToClipboard(_newlyCreatedAlias))"
                      Type="FlashMessage.MessageType.SuccessClickable">
        </FlashMessage>
    }

    @if (!string.IsNullOrWhiteSpace(SearchModel?.Alias) && !(_filteredAliases ?? Array.Empty<string>()).Any())
    {
        <FlashMessage Message="No aliases found"
                      Type="FlashMessage.MessageType.Error">
        </FlashMessage>
    }

    <EditForm FormName="Alias"
              Model="AliasModel"
              OnValidSubmit="CreateAlias">
        <div class="flex flex-row flex-wrap gap-2">

            <DataAnnotationsValidator />
            <ValidationSummary />

            <InputSelect @bind-Value="AliasModel!.Domain"
                         class="h-14 rounded-md border border-solid border-slate-200 text-gray-500"
                         required>
                <option selected
                        value="">
                    -- Select a domain --
                </option>

                @foreach (var domain in _domains ?? Enumerable.Empty<string>())
                {
                    <option value="@domain">@domain</option>
                }
            </InputSelect>

            <div class="relative">
                <InputText @bind-Value="AliasModel!.Mailbox"
                           class="peer/mailbox block h-14 w-80 rounded-md border-slate-200 px-2.5 pb-2.5 pt-5 text-sm text-gray-900 focus:border-blue-600"
                           id="mailbox"
                           placeholder=" "
                           required
                           type="text" />
                <label class="z-10 -translate-y-4 origin-[0] absolute start-2.5 top-4 scale-75 transform text-sm text-gray-500 duration-300 peer-placeholder-shown/mailbox:scale-100 peer-focus/mailbox:-translate-y-4 peer-focus/mailbox:scale-75 peer-focus/mailbox:text-blue-600 peer-placeholder-shown/mailbox:translate-y-0"
                       for="mailbox">
                    Mailbox alias
                </label>
            </div>

            <div class="relative">
                <InputNumber @bind-Value="_aliasLength"
                             class="peer/length shrink-0 block h-14 w-24 rounded-md border-slate-200 px-2.5 pb-2.5 pt-5 text-sm text-gray-900 focus:border-blue-600"
                             id="mailbox-alias-length"
                             max="32"
                             min="8"
                             placeholder=" "
                             type="number" />
                <label class="z-10 -translate-y-4 origin-[0] absolute start-2.5 top-4 scale-75 transform text-sm text-gray-500 duration-300 peer-placeholder-shown/length:scale-100 peer-focus/length:-translate-y-4 peer-focus/length:scale-75 peer-focus/length:text-blue-600 peer-placeholder-shown/length:translate-y-0"
                       for="mailbox-alias-length">
                    Alias length
                </label>
            </div>

            <button class="group h-14 rounded-lg border border-slate-500 px-4 align-middle text-slate-500 hover:bg-slate-500 hover:text-white focus:outline focus:outline-4 focus:outline-slate-300"
                    @onclick="GenerateRandomAlias"
                    type="button">
                <i class="fa-shuffle fa-solid fa-xl fill-slate-500 group-hover:fill-white"></i>
                <span>Randomize</span>
            </button>
        </div>

        <button class="mt-5 block h-14 rounded-lg border border-sky-500 bg-sky-500 px-4 align-middle text-white hover:bg-sky-600 hover:border-sky-600"
                type="submit">
            <i class="fa-at fa-solid fa-xl"></i>
            <span>Create</span>
        </button>
    </EditForm>

    @if (_aliases?.Any() == false)
    {
        <pre class="text-lg">Loading...</pre>
    }
    else
    {
        <div class="mt-10">

            <EditForm EditContext="_searchEditContext"
                      FormName="Search"
                      OnValidSubmit="SearchAlias"
                      class="mb-10">

                <div class="flex flex-row justify-end gap-0">
                    <div class="relative">
                        <InputText @bind-Value="SearchModel!.Alias"
                                   class="peer/length shrink-0 block h-14 w-60 rounded-l-md border-slate-200 px-2.5 pb-2.5 pt-5 text-sm text-gray-900 focus:border-blue-600"
                                   placeholder=" "
                                   type="text" />
                        <label class="z-10 -translate-y-4 origin-[0] absolute start-2.5 top-4 scale-75 transform text-sm text-gray-500 duration-300 peer-placeholder-shown/length:scale-100 peer-focus/length:-translate-y-4 peer-focus/length:scale-75 peer-focus/length:text-blue-600 peer-placeholder-shown/length:translate-y-0"
                               for="mailbox-alias-length">
                            Search
                        </label>
                    </div>

                    <button class="group h-14 rounded-r-lg border border-slate-500 px-4 align-middle text-slate-500 hover:bg-slate-500 hover:text-white focus:outline focus:outline-4 focus:outline-slate-300"
                            @onclick="ClearSearcForm"
                            type="reset">
                        <i class="fa-eraser fa-solid fa-xl fill-slate-500 group-hover:fill-white"></i>
                        <span class="hidden md:inline">Reset</span>
                    </button>
                </div>

                <div class="text-right text-red-500">
                    <DataAnnotationsValidator />
                    <ValidationMessage For="@(() => SearchModel!.Alias)" />
                </div>
            </EditForm>

            @foreach (var alias in (_filteredAliases ?? _aliases ?? Enumerable.Empty<string>()).Select((value, index) => new
                      {
                          Value = value,
                          Index = index
                      }))
            {
                var backgroundClass = alias.Index % 2 == 0 ? "bg-neutral-100" : string.Empty;
                var aliasParts = alias.Value.Split('@');
                var mailbox = aliasParts[0];
                var domain = aliasParts[1];

                <div class="@backgroundClass flex items-center gap-2 p-4"
                     @key="alias.Value">
                    <button class="h-10 rounded-lg bg-slate-900 px-4 text-white hover:bg-slate-700"
                            @onclick="@(_ => CopyAliasToClipboard(alias.Value))">
                        <i class="fa-clipboard fa-solid"></i>
                        <span class="hidden text-nowrap md:inline">Copy to clipboard</span>
                    </button>
                    <span class="flex-1 break-all">
                        <MailboxName Domain="@domain"
                                     Mailbox="@mailbox"
                                     SearchPhrase="@SearchModel?.Alias">
                        </MailboxName>
                    </span>

                    @* TODO: this can be extracted into a component *@
                    @if (!string.IsNullOrWhiteSpace(_showDeleteChoicesFor) &&
                         _showDeleteChoicesFor == alias.Value)
                    {
                        <button class="h-10 rounded-lg bg-red-200 px-4 text-neutral-500 hover:bg-red-500 hover:text-white"
                                @onclick="@(_ => DeleteAlias(alias.Value))"
                                type="button">
                            Yes
                        </button>

                        <button class="h-10 rounded-lg bg-slate-500 px-4 font-bold text-white hover:bg-slate-400"
                                @onclick="() => _showDeleteChoicesFor = string.Empty"
                                type="button">
                            No
                        </button>
                    }
                    else
                    {
                        <button class="h-10 rounded-lg bg-rose-500 px-4 text-white hover:bg-rose-700"
                                @onclick="@(_ => _showDeleteChoicesFor = alias.Value)"
                                type="button">
                            <i class="fa-solid fa-trash-can"></i>
                            <span class="hidden md:inline">Delete</span>
                        </button>
                    }
                </div>
            }
        </div>
    }
</div>